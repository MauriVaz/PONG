{"mappings":"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","sources":["src/actors/Actor.ts","src/utils/keyboardMap.ts","src/actors/Barra.ts","src/utils/checkLimits.ts","src/utils/constantes.ts","src/actors/FPSViewer.ts","src/utils/angleToRad.ts","src/actors/Ball.ts","src/actors/Marcador.ts","src/script.ts"],"sourcesContent":["import { Point } from '../types/Point';\r\n\r\nexport interface IActor {\r\n  position: Point;\r\n  update: (delta: number) => void;\r\n  keyboard_event_down?: (key: string) => void;\r\n  keyboard_event_up?: (key: string) => void;\r\n  draw: (delta: number, ctx: CanvasRenderingContext2D) => void;\r\n}\r\n\r\nexport class Actor implements IActor {\r\n  position: Point;\r\n\r\n  constructor(position: Point) {\r\n    this.position = position;\r\n  }\r\n\r\n  update(delta: number) {\r\n  }\r\n\r\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n  }\r\n\r\n  keyboard_event(key: string) {\r\n  }\r\n}","export enum Carkey {\r\n    LEFT,\r\n    RIGHT,\r\n}\r\n\r\nexport interface KeyboardMap {\r\n    [key: string]: Carkey;\r\n}\r\n\r\nexport let MAP_A = {\r\n  ArrowLeft: Carkey.LEFT,\r\n  ArrowRight: Carkey.RIGHT,\r\n};\r\nexport let MAP_B = {\r\n  a: Carkey.LEFT,\r\n  d: Carkey.RIGHT,\r\n};","import { Actor, IActor } from './Actor';\r\nimport { Point } from '../types/Point';\r\nimport { KeyboardMap, Carkey } from \"../utils/keyboardMap\";\r\nimport { checkLimits } from '../utils/checkLimits';\r\nimport { canvasWidth, canvasHeight } from '../utils/constantes'\r\n\r\nexport class Barra extends Actor implements IActor {\r\n  origin: Point;\r\n  color: string;\r\n  speed: Point;\r\n  position: Point;\r\n  keyboardMap: KeyboardMap;\r\n  barraWidth: number;\r\n  barraHeight: number;\r\n\r\n  constructor(initialPos: Point, keyboardMap: KeyboardMap, color:string) {\r\n    super(initialPos);\r\n    this.keyboardMap = keyboardMap;\r\n    this.origin = { x: initialPos.x, y: initialPos.y };\r\n    this.position = { x: initialPos.x, y: initialPos.y };\r\n    this.color = color;\r\n    this.speed = { x: initialPos.x, y: initialPos.y };\r\n    this.barraWidth = 20;\r\n    this.barraHeight = 120;\r\n  }\r\n  update(delta: number) {\r\n    let newPos = {\r\n      x: this.origin.x,\r\n      y: this.origin.y,\r\n    }\r\n    if (!checkLimits(newPos, this.barraHeight, this.barraWidth, canvasWidth, canvasHeight)) {\r\n      this.origin.x = newPos.x;\r\n      if (this.origin.y < 0) {\r\n        this.origin.y = newPos.y + 10;\r\n      }\r\n      if (this.origin.y > 360) {\r\n        this.origin.y = newPos.y - 10;\r\n      }\r\n    }\r\n  }\r\n  keyboard_event_up(key: string) {\r\n    let tecla = this.keyboardMap[key];\r\n    if (tecla === Carkey.LEFT) {\r\n      this.origin.y -= 10;\r\n      this.speed.y -= 10;\r\n    } else if (tecla === Carkey.RIGHT) {\r\n      this.origin.y += 10;\r\n      this.speed.y += 10;\r\n    }\r\n  }\r\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.fillRect(this.origin.x, this.origin.y, this.barraWidth, this.barraHeight);\r\n  }\r\n}","import { Point } from \"../types/Point\";\r\nimport { canvasWidth, canvasHeight } from \"../utils/constantes\";\r\n\r\nexport const checkLimits = (position: Point, actorHeight :number, actorWidth :number, canvasWidth: number, canvasHeight:number) => {\r\n  if (\r\n    position.x <= canvasWidth - actorWidth\r\n    && position.x > 0\r\n    && position.y <= canvasHeight - actorHeight\r\n    && position.y > 0) {\r\n    return true;\r\n  }\r\n  return false;\r\n};","export const canvasHeight: number = 480;\r\nexport const canvasWidth: number = 720;","import { Actor } from './Actor';\r\n\r\nexport class FPSViewer extends Actor {\r\n  update() {}\r\n  keyboard_event() {}\r\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n    const fps = (1 / delta).toFixed(2);\r\n    ctx.font = '15px Arial';\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillText(`FPS:${fps}`, this.position.x, this.position.y);\r\n  }\r\n}","export const angleToRad = (angle: number) => (angle * Math.PI) / 180;","import { Actor } from './Actor';\r\nimport { Point } from '../types/Point';\r\nimport { angleToRad } from '../utils/angleToRad';\r\nimport { canvasWidth, canvasHeight } from '../utils/constantes';\r\n\r\nexport class Ball extends Actor {\r\n  speed: Point;\r\n  initialSpeed: number;\r\n  origin: Point;\r\n  color: string;\r\n  ballHeight: number;\r\n  ballWidth: number;\r\n  angleX: number;\r\n  angleY: number;\r\n  constructor(initialPos: Point, color: string) {\r\n    super(initialPos);\r\n    this.speed = { x: initialPos.x, y: initialPos.y };\r\n    this.initialSpeed = 4;\r\n    this.origin = { x: initialPos.x, y: initialPos.y };\r\n    // this.position = { x: initialPos.x, y: initialPos.y };\r\n    this.ballWidth = 20;\r\n    this.ballHeight = 20;\r\n    this.color = color;\r\n    this.angleX = 45;\r\n    this.angleY = 45;\r\n  }\r\n  update(delta: number) {\r\n    let newPos = {\r\n      x: this.origin.x + angleToRad(this.angleX) + this.speed.x * (delta / 720),\r\n      y: this.origin.y + angleToRad(this.angleY) + this.speed.y * (delta / 720),\r\n    }\r\n    this.origin = newPos;\r\n    if (newPos.x > canvasWidth - this.ballHeight || newPos.x < 0) {\r\n      this.angleX *= -1;\r\n    }\r\n    if (newPos.y > canvasHeight - this.ballHeight || newPos.y < 0) {\r\n      this.angleY *= -1;\r\n    }\r\n  }\r\n  keyboard_event() {}\r\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n    ctx.fillStyle = this.color;\r\n    ctx.fillRect(this.origin.x, this.origin.y, 20, 20);\r\n  }\r\n}","import { Point } from '../types/Point';\r\nimport { Actor } from './Actor';\r\nimport { Ball } from './Ball';\r\n\r\nexport class Marcador extends Actor {\r\n  p1: number;\r\n  p2: number;\r\n  constructor(initialPos: Point) {\r\n    super(initialPos);\r\n    this.p1 = 0;\r\n    this.p2 = 0;\r\n  }\r\n  update() {\r\n  }\r\n  keyboard_event() {}\r\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\r\n    ctx.font = '25px Arial';\r\n    ctx.fillStyle = 'white';\r\n    ctx.fillText(`Marcador: ${this.p1}-${this.p2}`, this.position.x, this.position.y);\r\n  }\r\n}","import { Barra } from './actors/Barra';\r\nimport { IActor } from './actors/Actor';\r\nimport { FPSViewer } from './actors/FPSViewer';\r\nimport { Ball } from './actors/Ball';\r\nimport { Marcador } from './actors/Marcador';\r\nimport { MAP_A, MAP_B } from './utils/keyboardMap';\r\n\r\nwindow.onload = () => {\r\n  var canvas = document.getElementById('canvas') as HTMLCanvasElement;\r\n  var ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\r\n  //  Creamos los actores\r\n  let barra1 = new Barra({ x: 10, y: 180 }, MAP_B, 'white');\r\n  let barra2 = new Barra({ x: 690, y: 180 }, MAP_A, 'white');\r\n  let fps = new FPSViewer({ x: 70, y: 30 });\r\n  let ball = new Ball({ x: 350, y: 230 }, 'white');\r\n  let marcador = new Marcador({ x: 240, y: 30 });\r\n  let actors: Array<IActor> = [fps, barra1, barra2, ball, marcador];\r\n  let lastFrame = 0;\r\n  const render = (time: number) => {\r\n    let delta = (time - lastFrame) / 1000;\r\n    lastFrame = time;\r\n    actors.forEach((e) => e.update(delta));\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    actors.forEach((e) => {\r\n      ctx.save();\r\n      e.draw(delta, ctx);\r\n      e.update(delta);\r\n      ctx.restore();\r\n    });\r\n    window.requestAnimationFrame(render);\r\n  };\r\n\r\n  window.requestAnimationFrame(render);\r\n  document.body.addEventListener('keydown', (e) => {\r\n    actors.forEach((actor) => {\r\n      if (actor.keyboard_event_down) {\r\n        actor.keyboard_event_down(e.key);\r\n      }\r\n    });\r\n  });\r\n  document.body.addEventListener(\"keyup\", (e) => {\r\n    actors.forEach((actor) => {\r\n      if (actor.keyboard_event_up) {\r\n        actor.keyboard_event_up(e.key);\r\n      }\r\n    });\r\n  });\r\n}"],"names":["$8235678231353d24$export$f73d3eb6fd876d80","position","this","update","delta","draw","delta1","ctx","keyboard_event","key","Carkey","$166ee4b8d283169d$export$ea8005e43911f62a","$166ee4b8d283169d$export$40b97bd9cab42943","ArrowLeft","LEFT","ArrowRight","RIGHT","$166ee4b8d283169d$export$2db32ff39457a7e1","a","d","$96d93119dc29cf5b$export$b7f4ea6bb4b2f6f2","initialPos","keyboardMap","color","super","origin","x","y","speed","barraWidth","barraHeight","newPos","actorHeight","actorWidth","canvasWidth","canvasHeight","keyboard_event_up","tecla","fillStyle","fillRect","$37691bb6273e74a0$export$13acb86b4b3ca30e","fps","toFixed","font","fillText","$0a61606137f8689b$export$788095cfcbd7518","angle","Math","PI","$a0e5b5bbb3d37234$export$a83d7c3fa53790c9","initialSpeed","ballWidth","ballHeight","angleX","angleY","$e953345bc035cdca$export$3849850392845910","p1","p2","window","onload","canvas","document","getElementById","getContext","barra1","barra2","actors","lastFrame","render","time","forEach","e","width","height","save","restore","requestAnimationFrame","body","addEventListener","actor","keyboard_event_down"],"version":3,"file":"index.f869cd94.js.map"}