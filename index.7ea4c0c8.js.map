{"mappings":"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","sources":["src/actors/Actor.ts","src/utils/keyboardMap.ts","src/utils/checkLimits.ts","src/actors/Barra.ts","src/actors/FPSViewer.ts","src/actors/Ball.ts","src/actors/Marcador.ts","src/script.ts"],"sourcesContent":["import { Point } from '../types/Point';\n\nexport interface IActor {\n  position: Point;\n  update: (delta: number) => void;\n  keyboard_event_down?: (key: string) => void;\n  keyboard_event_up?: (key: string) => void;\n  draw: (delta: number, ctx: CanvasRenderingContext2D) => void;\n}\n\nexport class Actor implements IActor {\n  position: Point;\n\n  constructor(position: Point) {\n    this.position = position;\n  }\n\n  update(delta: number) {\n  }\n\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n  }\n\n  keyboard_event(key: string) {\n  }\n}","export enum Carkey {\n    LEFT,\n    RIGHT,\n}\n\nexport interface KeyboardMap {\n    [key: string]: Carkey;\n}\n\nexport let MAP_A = {\n  ArrowLeft: Carkey.LEFT,\n  ArrowRight: Carkey.RIGHT,\n};\nexport let MAP_B = {\n  a: Carkey.LEFT,\n  d: Carkey.RIGHT,\n};","import { Point } from \"../types/Point\";\n\nexport const checkLimits = (position: Point, actorHeight :number, actorWidth :number, canvasWidth:number, canvasHeight:number) => {\n  if (\n    position.x <= canvasWidth - actorWidth\n    && position.x > 0\n    && position.y <= canvasHeight - actorHeight\n    && position.y > 0) {\n    return true;\n  }\n  return false;\n};","import { Actor, IActor } from './Actor';\nimport { Point } from '../types/Point';\nimport { KeyboardMap, Carkey } from \"../utils/keyboardMap\";\nimport { checkLimits } from '../utils/checkLimits';\n\nexport class Barra extends Actor implements IActor {\n  origin: Point;\n  color: string;\n  speed: Point;\n  position: Point;\n  keyboardMap: KeyboardMap;\n  barraWidth: number;\n  barraHeight: number;\n\n  constructor(initialPos: Point, keyboardMap: KeyboardMap, color:string) {\n    super(initialPos);\n    this.keyboardMap = keyboardMap;\n    this.origin = { x: initialPos.x, y: initialPos.y };\n    this.position = { x: initialPos.x, y: initialPos.y };\n    this.color = color;\n    this.speed = { x: initialPos.x, y: initialPos.y };\n    this.barraWidth = 20;\n    this.barraHeight = 120;\n  }\n  update(delta: number) {\n    let newPos = {\n      x: this.origin.x + 10,\n      y: this.origin.y + 10,\n    }\n    if (checkLimits(newPos, this.barraHeight, this.barraWidth, 720, 480)) {\n      this.position = newPos;\n    }\n  }\n  keyboard_event_up(key: string) {\n    let tecla = this.keyboardMap[key];\n    if (tecla === Carkey.LEFT) {\n      this.origin.y -= 10;\n      this.speed.y -= 10;\n    } else if (tecla === Carkey.RIGHT) {\n      this.origin.y += 10;\n      this.speed.y += 10;\n    }\n  }\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.origin.x, this.origin.y, this.barraWidth, this.barraHeight);\n  }\n}","import { Actor } from './Actor';\n\nexport class FPSViewer extends Actor {\n  update() {}\n  keyboard_event() {}\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    const fps = (1 / delta).toFixed(2);\n    ctx.font = '15px Arial';\n    ctx.fillStyle = 'white';\n    ctx.fillText(`FPS:${fps}`, this.position.x, this.position.y);\n  }\n}","import { Actor } from './Actor';\nimport { Point } from '../types/Point';\nimport { checkLimits } from '../utils/checkLimits';\nimport { Marcador } from '../actors/Marcador'\n\nexport class Ball extends Actor {\n  speed: Point;\n  initialSpeed: number;\n  origin: Point;\n  position: Point;\n  color: string;\n  ballHeight: number;\n  ballWidth: number;\n  constructor(initialPos: Point, color: string) {\n    super(initialPos);\n    this.speed = { x: initialPos.x, y: initialPos.y };\n    this.initialSpeed = 4;\n    this.origin = { x: initialPos.x, y: initialPos.y };\n    this.position = { x: initialPos.x, y: initialPos.y };\n    this.ballWidth = 20;\n    this.ballHeight = 20;\n    this.color = color;\n  }\n  update(delta: number) {\n    // NOTE: Evita que la pelota salga del Canvas\n    let newPos = {\n      x: this.origin.x - 1.5 - this.speed.x * (delta / 720),\n      y: this.origin.y - 1.5 - this.speed.y * (delta / 720),\n    }\n    if (checkLimits(newPos, this.ballHeight, this.ballWidth, 720, 480)) {\n      this.origin = newPos;\n    }\n    // NOTE: Intento de rebote con la pared dearriba\n    if (this.origin.y <= 2) {\n      this.origin.x = this.origin.x + 1.5 + this.speed.y * (delta / 720);\n      this.origin.y = this.origin.y + 1.5 + this.speed.y * (delta / 720);\n    }\n  }\n  keyboard_event() {}\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    ctx.fillStyle = this.color;\n    ctx.fillRect(this.origin.x, this.origin.y, 20, 20);\n  }\n}","import { Point } from '../types/Point';\nimport { Actor } from './Actor';\n\nexport class Marcador extends Actor {\n  p1: number;\n  p2: number;\n  constructor(initialPos: Point) {\n    super(initialPos);\n    this.p1 = 0;\n    this.p2 = 0;\n  }\n  update() {}\n  keyboard_event() {}\n  draw(delta: number, ctx: CanvasRenderingContext2D) {\n    ctx.font = '25px Arial';\n    ctx.fillStyle = 'white';\n    ctx.fillText(`Marcador: ${this.p1}-${this.p2}`, this.position.x, this.position.y);\n  }\n}","import { Barra } from './actors/Barra';\nimport { IActor } from './actors/Actor';\nimport { FPSViewer } from './actors/FPSViewer';\nimport { Ball } from './actors/Ball';\nimport { Marcador } from './actors/Marcador';\nimport { MAP_A, MAP_B } from './utils/keyboardMap';\n\nwindow.onload = () => {\n  var canvas = document.getElementById('canvas') as HTMLCanvasElement;\n  var ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n  //  Creamos los actores\n  let barra1 = new Barra({ x: 10, y: 180 }, MAP_B, 'white');\n  let barra2 = new Barra({ x: 690, y: 180 }, MAP_A, 'white');\n  let fps = new FPSViewer({ x: 70, y: 30 });\n  let ball = new Ball({ x: 350, y: 230 }, 'white');\n  let marcador = new Marcador({ x: 240, y: 30 });\n  let actors: Array<IActor> = [fps, barra1, barra2, ball, marcador];\n  let lastFrame = 0;\n  const render = (time: number) => {\n    let delta = (time - lastFrame) / 1000;\n    lastFrame = time;\n    actors.forEach((e) => e.update(delta));\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    actors.forEach((e) => {\n      ctx.save();\n      e.draw(delta, ctx);\n      e.update(delta);\n      ctx.restore();\n    });\n    window.requestAnimationFrame(render);\n  };\n\n  window.requestAnimationFrame(render);\n  document.body.addEventListener('keydown', (e) => {\n    actors.forEach((actor) => {\n      if (actor.keyboard_event_down) {\n        actor.keyboard_event_down(e.key);\n      }\n    });\n  });\n  document.body.addEventListener(\"keyup\", (e) => {\n    actors.forEach((actor) => {\n      if (actor.keyboard_event_up) {\n        actor.keyboard_event_up(e.key);\n      }\n    });\n  });\n}"],"names":["$8235678231353d24$export$f73d3eb6fd876d80","position","this","update","delta","draw","delta1","ctx","keyboard_event","key","Carkey","$166ee4b8d283169d$export$ea8005e43911f62a","$166ee4b8d283169d$export$40b97bd9cab42943","ArrowLeft","LEFT","ArrowRight","RIGHT","$166ee4b8d283169d$export$2db32ff39457a7e1","a","d","$f7dc83d07de367d2$export$b427d64c03133802","actorHeight","actorWidth","canvasWidth","canvasHeight","x","y","$96d93119dc29cf5b$export$b7f4ea6bb4b2f6f2","initialPos","keyboardMap","color","super","origin","speed","barraWidth","barraHeight","newPos","keyboard_event_up","tecla","fillStyle","fillRect","$37691bb6273e74a0$export$13acb86b4b3ca30e","fps","toFixed","font","fillText","$a0e5b5bbb3d37234$export$a83d7c3fa53790c9","initialSpeed","ballWidth","ballHeight","$e953345bc035cdca$export$3849850392845910","p1","p2","window","onload","canvas","document","getElementById","getContext","barra1","barra2","actors","lastFrame","render","time","forEach","e","width","height","save","restore","requestAnimationFrame","body","addEventListener","actor","keyboard_event_down"],"version":3,"file":"index.7ea4c0c8.js.map"}